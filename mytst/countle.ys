        .pos 0
#initialize %rax to 0

irmovq $0, %rax 
irmovq $0, %rsp 
irmovq $0, %rsi
irmovq $1, %rbx

#initialize another register to the address of the first number
#it can also be helpful to initialize another register to 1

irmovq nums, %rcx 
nop
nop
nop
mrmovq 0(%rcx), %rdx
nop
nop
nop
addq %rsp, %rdx
cmovle %rbx, %rsi
nop
nop
nop
cmovg %rsp, %rsi
nop
nop
nop
addq %rsi, %rax

mrmovq 8(%rcx), %rdx
nop
nop
nop
addq %rsp, %rdx
cmovle %rbx, %rsi
nop
nop
nop
cmovg %rsp, %rsi
nop
nop
nop
addq %rsi, %rax

mrmovq 16(%rcx), %rdx
nop
nop
nop
addq %rsp, %rdx
cmovle %rbx, %rsi
nop
nop
nop
cmovg %rsp, %rsi
nop
nop
nop
addq %rsi, %rax

mrmovq 24(%rcx), %rdx
nop
nop
nop
addq %rsp, %rdx
cmovle %rbx, %rsi
nop
nop
nop
cmovg %rsp, %rsi
nop
nop
nop
addq %rsi, %rax

mrmovq 32(%rcx), %rdx
nop
nop
nop
addq %rsp, %rdx
cmovle %rbx, %rsi
nop
nop
nop
cmovg %rsp, %rsi
nop
nop
nop
addq %rsi, %rax

mrmovq 40(%rcx), %rdx
nop
nop
nop
addq %rsp, %rdx
cmovle %rbx, %rsi
nop
nop
nop
cmovg %rsp, %rsi
nop
nop
nop
addq %rsi, %rax

#for each number:  
#get the number out of memory
#cause the condition codes to be modified based upon value of the number
#add 1 to %rax if number <= 0; otherwise, add 0 to %rax


#finally store %rax in memory location result


        halt
        .align 8
result: .quad 0     #should be 3 at end
nums:   .quad 11
        .quad -23
        .quad 0
        .quad 15
        .quad -3
        .quad 4
        .quad -3        
        .quad -3  
        .quad -3  
        .quad 12 
