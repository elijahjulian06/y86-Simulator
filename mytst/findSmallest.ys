# This program calls a min function which takes as input the
# address of a list and the number of elements in the list
# and returns the smallest value in the list
#
        .pos 0
        irmovq stack, %rsp   #initialize stack pointer
        irmovq list, %rdi    #address of first element
        irmovq len, %rsi     #address of length of list
        mrmovq (%rsi), %rsi  #load length of list
        irmovq 8, %r8       #store 8 for incementing list pointer
        irmovq 1, %rbx      #store 1 for decrement
        irmovq 0, %rdx      #temp value
        irmovq 0, %r10      #save min
        irmovq 200, %r11
        irmovq list, %rax   #store addr of list aka first min
        mrmovq (%rax), %rax #store value aka first min
        call stack
#  When halt statement is reached, %rax should be equal to -7 (0xfffffffffffffff9)
        halt
#
# min function
# sets %rax to the value of the smallest element in a list
# %rdi contains the address of the first element
# %rsi contains the length of the list
# TODO: write the min function
stack:  
        mrmovq (%rdi), %r9   #store the value at list into r9
        pushq %r9           #push value at list onto stack
        addq %r8, %rdi      #increment addr
        subq %rbx, %rsi     #sub length of list
        jne stack:          #once length = 0 move on 
min:
        popq %rdx           #pop top of stack
        rrmovq %rax, %r10   #store rax into r10 temp
        subq %rdx, %r10     #sub rax = 9 -- 10
        cmovg %rdx, %rax    #value was smaller so new min = rdx
        subq  %rsp, %r11     #subtract 0x200 - stack value
        jne min
end:
        ret    
#
#        list data
        .pos 0x100
len:    .quad 10 
list:   .quad 14
        .quad 3
        .quad 2
        .quad 27
        .quad -2
        .quad 12
        .quad 23
        .quad 5
        .quad -7
        .quad 9

#       stack    
        .pos 0x200
stack:  .quad 0
