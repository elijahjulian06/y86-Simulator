# This program performs an insertion sort on a list of numbers.
# Note the sort is in-place. At the end there is a single, sorted list.
# If the program is correct, then the final memory dump should contain the 
# following:
# 100: 000000000000000a fffffffffffffff9 fffffffffffffffe 0000000000000002 
# 120: 0000000000000003 0000000000000005 0000000000000009 000000000000000c 
# 140: 000000000000000e 0000000000000017 000000000000001b 0000000000000000 
#
        .pos 0
        irmovq stack, %rsp   #initialize stack pointer
        irmovq list, %rdi    #address of first element
        irmovq len, %rax     #address of length of list
        mrmovq (%rax), %rax  #load length of list
        irmovq 8, %rsi       #offset of current element to insert
        irmovq 1, %rcx       #length of sorted list 
        irmovq list, %r10
        irmovq 0, %r9
        call while
#
# loop inserting each element into a sorted list
# first iteration: insert 3 into list containing 14 giving the list 3 14
# second iteration: insert 2 into the list containing 3 14 giving the list 2 3 14
# third iteration: insert 27 into the list contain 2 3 14 giving 2 3 14 27
# stop when the length of the sorted list is equal to the length of list
# 
# TODO: Provide missing code (see description below of insert function)
#
done:   halt

while: 
        rrmovq %rax, %r8   #set r8 to length of list
        subq %r9, %r8      # subtract 10 - 0 = 10 so it jumps to insert
        jne insert
        ret


#
# insert function
# Takes the address of the first element in the list
# and the offset from that address of the new element to insert
# and swaps the values of consecutive elements until the new element
# is in the correct spot.
# For example, suppose current list is -2 2 3 14 27
# Next element to insert is 9 (which in memory is right after the 27)
# The insert function will loop:
# after first iteration the list will be: -2 2 4 14 9 27
# after second iteration the list will be: -2 2 4 9 14 27
# Now, the function is exited because the 9 is in the right spot (> 4)
#
# TODO: write the insert function
insert:
        mrmovq (%rdi), %r13  #grab first element
        mrmovq 8(%rdi), %r14 #second element

        rrmovq %rdi, %rsp
        addq %rsi, %rsp      #holds last element of the list
        
        rrmovq %r13, %rbx    #stores value of first
        subq %r14, %rbx      #first - second

        jg swap              #if first > second go to swap

        rrmovq %rsp, %rdi
        addq %rsi, %rdi      #if they are in the correct position you are done jump back to while:
        jmp while            #else increment the adress by 8
swap: 
        rmmovq %r14, (%rdi)  #second element put at position for first
        rmmovq %r13, 8(%rdi) #first element put at position of second
        irmovq list, %rbp
        subq %rdi, %rbp     
        jne checkprev       #if rdi != orginal we need to check if we need to swap again
        addq %rcx, %r9
        addq %rsi, %rdi
        rrmovq %rsp, %rdi
        jmp while           #if rdi = orginal adress go to while loop

checkprev:
        subq %rsi, %rdi
        jmp insert

#        list data
        .pos 0x100
len:    .quad 10
list:   .quad 14
        .quad 3
        .quad 2
        .quad 27
        .quad -2
        .quad 12
        .quad 23
        .quad 5
        .quad -7
        .quad 9

#       stack    
        .pos 0x200
stack:  .quad 0
